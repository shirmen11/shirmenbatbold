{"version":3,"sources":["img/bg-shape.svg","img/pic-1.jpg","img/sun-icon.svg","img/pic-2.jpg","img/snow-icon.svg","Components/Info/Info.js","Components/Country/Country.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Info","props","src","bg","alt","id","className","tempSymbol","onClick","setTempSymbol","Country","sun","mn","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,0FCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,iICuC5BC,EAnCF,SAAEC,GAGX,OACI,iCACI,yBAAKC,IAAKC,IAAIC,IAAI,mBAAmBC,GAAG,OACxC,uCAAY,6BAAZ,OAAqB,sCACrB,6BACA,yFAA8D,6BAA9D,+DACA,yBAAKC,UAAU,UACX,oEACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,OACO,MAArBL,EAAMM,WACJ,4BAAQD,UAAU,WAAlB,KAED,4BAAQE,QAASP,EAAMQ,eAAvB,KAEE,uCAEJ,yBAAKH,UAAU,OACO,MAArBL,EAAMM,WACJ,4BAAQD,UAAU,WAAlB,KAED,4BAAQE,QAASP,EAAMQ,eAAvB,KAEE,8C,gCCATC,G,YAxBC,WACZ,OACI,iCACI,yBAAKJ,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKJ,IAAKS,IAAKP,IAAI,QACnB,uBAAGC,GAAG,QAAN,WAEL,qCAEH,yBAAKH,IAAKU,IAAIR,IAAI,cAAcC,GAAG,gBACnC,yBAAKC,UAAU,WACX,6BACI,0CACA,wCAEJ,6BACI,0CACA,8CCPLO,G,MAZH,WAAO,IAAD,EACkBC,mBAAS,KAD3B,mBACXP,EADW,KACCE,EADD,KAEhB,OACI,8BACC,kBAAC,EAAD,CAAMF,WAAYA,EAAYE,cAAe,kBAAMA,EAA6B,MAAfF,EAAqB,IAAM,QAC5F,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCaQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0a9962d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-shape.9b44a343.svg\";","module.exports = __webpack_public_path__ + \"static/media/pic-1.412dea68.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sun-icon.ee97e668.svg\";","module.exports = __webpack_public_path__ + \"static/media/pic-2.236ccd82.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-icon.916aea4e.svg\";","import React from 'react'\nimport './Info.css';\nimport bg from '../../img/bg-shape.svg'\n\nconst Info = ( props ) => {\n    // props.tempSymbol\n    // props.setTempSymbol\n    return(\n        <section>\n            <img src={bg} alt='Background Shape' id='bg' />\n            <h1>WEATHER <br/> ME <span>NOW</span></h1>\n            <hr/>\n            <p> A minimal weather app design to brighten     up your day. <br/> Designed and devloped by Batbold Shirmen @Batbold Shirmen.</p>\n            <div className='buttom'>\n                <p>Your weather is currently showing in:</p>\n                <div className='buttons'>\n                    <div className='btn'>\n                    {props.tempSymbol === 'C' ?\n                       <button className='clicked'>C</button>\n                      :\n                      <button onClick={props.setTempSymbol}>C</button>\n                      }\n                        <p>Celsius</p>\n                    </div>\n                    <div className='btn'>\n                    {props.tempSymbol === 'F' ?\n                       <button className='clicked'>F</button>\n                      :\n                      <button onClick={props.setTempSymbol}>F</button>\n                      }\n                        <p>Fahrenheit</p>\n\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default Info;","import React from 'react';\nimport mn from '../../img/pic-1.jpg'\nimport sun from '../../img/sun-icon.svg';\nimport ca from '../../img/pic-2.jpg';\nimport snow from '../../img/snow-icon.svg';\n\nconst Country = () => {\n    return(\n        <section>\n            <div className='floater'>\n                <div className='icon'>\n                    <img src={sun} alt='Sun' />\n                    <p id='temp'>90Â°</p>\n                </div>\n               <p>SUNNY</p>\n            </div>\n            <img src={mn} alt='Ulaanbaator' id='country-img'/>\n            <div className='country'>\n                <div>\n                    <p>Ulaanbaator</p>\n                    <p>Mongolia</p>\n                </div>\n                <div>\n                    <p>Los Angeles</p>\n                    <p>California</p>\n                </div>\n            </div>\n        </section>\n    );\n}\nexport default Country","import React, { useState } from 'react';\nimport Info from './Components/Info/Info';\nimport Country from './Components/Country/Country';\nimport './App.css';\n\nconst App = () => {\n  let [tempSymbol, setTempSymbol] = useState('F')\n  return (\n      <main>\n       <Info tempSymbol={tempSymbol} setTempSymbol={() => setTempSymbol(tempSymbol === 'F' ? 'C' : 'F')} />\n       <Country />\n       <Country />\n      </main>\n      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}